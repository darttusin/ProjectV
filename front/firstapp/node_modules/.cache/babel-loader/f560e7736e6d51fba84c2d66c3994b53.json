{"ast":null,"code":"import { createEffect, createStore } from 'effector';\nimport { db } from \"../../DAL/firebase/firebaseInit\";\nimport { collection, getDocs } from \"firebase/firestore\";\nconst fetchUsers = createEffect(async () => {\n  const querySnapshot = await getDocs(collection(db, \"users\"));\n  querySnapshot.forEach(doc => {\n    console.log(`${doc.id} => ${doc.data()}`);\n  });\n  return querySnapshot;\n});\n//generic\nexport const $users = createStore({}).on(fetchUsers.doneData, (usersStore, response) => response);\n$users.watch(status => {\n  console.log(status);\n});","map":{"version":3,"sources":["C:/Users/PressF/WebstormProjects/first/firstapp/src/BLL/effector/usersStore.ts"],"names":["createEffect","createStore","db","collection","getDocs","fetchUsers","querySnapshot","forEach","doc","console","log","id","data","$users","on","doneData","usersStore","response","watch","status"],"mappings":"AAAA,SAAQA,YAAR,EAAmCC,WAAnC,QAAqD,UAArD;AACA,SAAQC,EAAR,QAAiB,iCAAjB;AACA,SAAQC,UAAR,EAAoBC,OAApB,QAAkC,oBAAlC;AAQA,MAAMC,UAAU,GAAGL,YAAY,CAAC,YAAY;AACxC,QAAMM,aAAa,GAAG,MAAMF,OAAO,CAACD,UAAU,CAACD,EAAD,EAAK,OAAL,CAAX,CAAnC;AACAI,EAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,GAAG,CAACG,EAAG,OAAMH,GAAG,CAACI,IAAJ,EAAW,EAAvC;AACH,GAFD;AAGA,SAAON,aAAP;AACH,CAN8B,CAA/B;AASA;AACA,OAAO,MAAMO,MAAM,GAAGZ,WAAW,CAAC,EAAD,CAAX,CACjBa,EADiB,CACdT,UAAU,CAACU,QADG,EACO,CAACC,UAAD,EAAaC,QAAb,KACrBA,QAFc,CAAf;AAKPJ,MAAM,CAACK,KAAP,CAAaC,MAAM,IAAI;AACnBV,EAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACH,CAFD","sourcesContent":["import {createEffect, createEvent, createStore} from 'effector'\r\nimport {db} from \"../../DAL/firebase/firebaseInit\";\r\nimport {collection, getDocs} from \"firebase/firestore\";\r\n\r\n\r\nexport interface UsersStoreState {\r\n    users: Map<string, string> | null\r\n}\r\n\r\n\r\nconst fetchUsers = createEffect(async () => {\r\n    const querySnapshot = await getDocs(collection(db, \"users\"));\r\n    querySnapshot.forEach((doc) => {\r\n        console.log(`${doc.id} => ${doc.data()}`);\r\n    });\r\n    return querySnapshot\r\n})\r\n\r\nexport type UserStore = UsersStoreState\r\n//generic\r\nexport const $users = createStore({})\r\n    .on(fetchUsers.doneData, (usersStore, response) =>\r\n        response\r\n    )\r\n\r\n$users.watch(status => {\r\n    console.log(status)\r\n})\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}