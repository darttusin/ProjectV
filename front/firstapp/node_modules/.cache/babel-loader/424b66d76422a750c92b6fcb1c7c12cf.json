{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PressF\\\\WebstormProjects\\\\first\\\\firstapp\\\\src\\\\contentComponents\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../App.css';\nimport { TextStyled } from '../styledComponent/TextStyled';\nimport { Input } from 'antd';\nimport { LoginStyled } from \"./Login-styled\";\nimport { UserStyled } from \"./login/User-styled\";\nimport { UserAllStyled } from \"./login/UserAll-styled\";\nimport { PasswordAllStyled } from \"./Password/PasswordAll-styled\";\nimport { ButtonFilledStyled } from '../styledComponent/ButtonFilled-styled';\nimport { ButtonStyled } from '../styledComponent/Button-styled';\nimport { $currentPassword, $currentUsername, $saveValidCheckbox, $users, savePassword, saveUsername } from \"../BLL/effector/usersStore\";\nimport { useStore } from \"effector-react\";\nimport { currentUser, rememberUser } from \"../BLL/effector/usersStoreLogined\";\nimport { InputFilledStyled } from '../styledComponent/InputFilled-styled';\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const username = useStore($currentUsername);\n  const password = useStore($currentPassword);\n  const mockUsers = useStore($users);\n  const loggedUser = useStore(currentUser);\n  const valid = useStore($saveValidCheckbox);\n  const history = useHistory();\n  const [isValid, setValid] = useState(true); //изменение checkbox\n\n  const [checked, setChecked] = useState(true); //сохранение введенного значения логина и пароля в строки логина\n\n  const handleUsernameChange = e => {\n    saveUsername(e.target.value);\n  };\n\n  const handlePasswordChange = e => {\n    savePassword(e.target.value);\n  }; //сравнение логина и пароля с моками и с друг другом\n\n\n  const checkUserRegistered = () => {\n    const existUser = mockUsers === null || mockUsers === void 0 ? void 0 : mockUsers.find(u => u.name === username && u.password === password);\n\n    if (existUser) {\n      rememberUser(existUser);\n      history.push(\"/home\");\n    } else {\n      setValid(false);\n    }\n  };\n\n  const rememberMeChange = () => {\n    const existUser = mockUsers === null || mockUsers === void 0 ? void 0 : mockUsers.find(u => u.name === username && u.password === password);\n\n    if (existUser) {\n      rememberUser(existUser);\n      history.push(\"/home\");\n    } else {\n      setValid(false);\n    }\n  };\n\n  const newAccount = () => {\n    history.push('/newAccount');\n  }; //разрешенные значения для ввода в строку username\n\n\n  const isStringValid = string => {\n    /*\r\n      Usernames can only have:\r\n      - Lowercase Letters (a-z)\r\n      - Numbers (0-9)\r\n      - Dots (.)\r\n      - Underscores (_)\r\n    */\n    const res = /^[A-Za-z0-9_\\.]+$/.exec(string);\n    return !!res;\n  }; //рамка подсвечивается при вводе любых данных  в поля, залинковать на кнопу submit\n\n\n  return /*#__PURE__*/_jsxDEV(LoginStyled, {\n    valid: isValid,\n    children: [/*#__PURE__*/_jsxDEV(InputFilledStyled, {\n      justifycontent: \"space-between\",\n      width: 100,\n      height: 194,\n      children: [/*#__PURE__*/_jsxDEV(UserAllStyled, {\n        children: /*#__PURE__*/_jsxDEV(UserStyled, {\n          valid: isStringValid(username),\n          children: [/*#__PURE__*/_jsxDEV(TextStyled, {\n            textSize: 20,\n            color: 'black',\n            fontWeight: \"bold\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            value: username,\n            onChange: handleUsernameChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PasswordAllStyled, {\n        children: /*#__PURE__*/_jsxDEV(UserStyled, {\n          valid: isStringValid(password),\n          children: [/*#__PURE__*/_jsxDEV(TextStyled, {\n            textSize: 20,\n            color: 'black',\n            fontWeight: 'bold',\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: 'password',\n            value: password,\n            onChange: handlePasswordChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonFilledStyled, {\n      width: 23,\n      height: 30,\n      justifycontent: 'space-between',\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextStyled, {\n        textSize: 17,\n        color: 'black',\n        fontWeight: 'normal',\n        children: \"Remember me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonFilledStyled, {\n      width: 37,\n      height: 30,\n      justifycontent: 'space-between',\n      children: [/*#__PURE__*/_jsxDEV(ButtonStyled, {\n        onClick: checkUserRegistered,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ButtonStyled, {\n        onClick: newAccount,\n        children: \"New Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"iSFt1YZO7lBTcYvLQrxHoVKWr+g=\", false, function () {\n  return [useStore, useStore, useStore, useStore, useStore, useHistory];\n});\n\n_c = Login;\nexport default Login; //добавить вывод сообщения о неправильно введенном логине и пароле\n//remember me\n//чекбокс вызывает функцию в которой есть true и false, оа идет в onClick сабмита\n//и по условию отменяет действие удаления хэша введенного значения\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/PressF/WebstormProjects/first/firstapp/src/contentComponents/Login.tsx"],"names":["React","useState","TextStyled","Input","LoginStyled","UserStyled","UserAllStyled","PasswordAllStyled","ButtonFilledStyled","ButtonStyled","$currentPassword","$currentUsername","$saveValidCheckbox","$users","savePassword","saveUsername","useStore","currentUser","rememberUser","InputFilledStyled","useHistory","Login","username","password","mockUsers","loggedUser","valid","history","isValid","setValid","checked","setChecked","handleUsernameChange","e","target","value","handlePasswordChange","checkUserRegistered","existUser","find","u","name","push","rememberMeChange","newAccount","isStringValid","string","res","exec"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport {TextStyled} from '../styledComponent/TextStyled';\r\nimport {Checkbox, Input} from 'antd';\r\nimport {LoginStyled} from \"./Login-styled\";\r\nimport {UserStyled} from \"./login/User-styled\";\r\nimport {UserAllStyled} from \"./login/UserAll-styled\";\r\nimport {PasswordAllStyled} from \"./Password/PasswordAll-styled\";\r\nimport {ButtonFilledStyled} from '../styledComponent/ButtonFilled-styled';\r\nimport {ButtonStyled} from '../styledComponent/Button-styled';\r\nimport {\r\n    $currentPassword,\r\n    $currentUsername,\r\n    $saveValidCheckbox,\r\n    $users,\r\n    savePassword,\r\n    saveUsername,\r\n    saveValid\r\n} from \"../BLL/effector/usersStore\";\r\nimport {useStore} from \"effector-react\";\r\nimport {currentUser, rememberUser} from \"../BLL/effector/usersStoreLogined\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {InputFilledStyled} from '../styledComponent/InputFilled-styled';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Login: React.FC = () => {\r\n    const username = useStore($currentUsername)\r\n    const password = useStore($currentPassword)\r\n    const mockUsers = useStore($users)\r\n    const loggedUser = useStore(currentUser)\r\n    const valid = useStore($saveValidCheckbox)\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    const [isValid, setValid] = useState(true)\r\n    //изменение checkbox\r\n\r\n    const [checked, setChecked] = useState(true)\r\n\r\n\r\n    //сохранение введенного значения логина и пароля в строки логина\r\n    const handleUsernameChange = (e: { target: { value: React.SetStateAction<string> } }) => {\r\n        saveUsername(e.target.value as string)\r\n    }\r\n    const handlePasswordChange = (e: { target: { value: React.SetStateAction<string> } }) => {\r\n        savePassword(e.target.value as string)\r\n    }\r\n\r\n//сравнение логина и пароля с моками и с друг другом\r\n    const checkUserRegistered = () => {\r\n        const existUser = mockUsers?.find((u) => u.name === username && u.password === password)\r\n        if (existUser) {\r\n            rememberUser(existUser)\r\n            history.push(\"/home\")\r\n        } else {\r\n            setValid(false)\r\n\r\n        }\r\n\r\n    };\r\n    const rememberMeChange = () => {\r\n        const existUser = mockUsers?.find((u) => u.name === username && u.password === password)\r\n        if (existUser) {\r\n            rememberUser(existUser)\r\n            history.push(\"/home\")\r\n        } else {\r\n            setValid(false)\r\n\r\n        }\r\n\r\n    };\r\n    const newAccount = () => {\r\n        history.push('/newAccount')\r\n    }\r\n    //разрешенные значения для ввода в строку username\r\n    const isStringValid = (string: string): boolean => {\r\n        /*\r\n          Usernames can only have:\r\n          - Lowercase Letters (a-z)\r\n          - Numbers (0-9)\r\n          - Dots (.)\r\n          - Underscores (_)\r\n        */\r\n        const res = /^[A-Za-z0-9_\\.]+$/.exec(string);\r\n        return !!res;\r\n    }\r\n    //рамка подсвечивается при вводе любых данных  в поля, залинковать на кнопу submit\r\n\r\n    return (\r\n        <LoginStyled valid={isValid}>\r\n            <InputFilledStyled justifycontent={\"space-between\"} width={100} height={194}>\r\n                <UserAllStyled>\r\n                    <UserStyled valid={isStringValid(username)}>\r\n                        <TextStyled textSize={20} color={'black'} fontWeight={\"bold\"}>\r\n                            Username\r\n                        </TextStyled>\r\n                        <Input value={username} onChange={handleUsernameChange}/>\r\n                    </UserStyled>\r\n                </UserAllStyled>\r\n\r\n                <PasswordAllStyled>\r\n                    <UserStyled valid={isStringValid(password)}>\r\n                        <TextStyled textSize={20} color={'black'} fontWeight={'bold'}>\r\n                            Password\r\n                        </TextStyled>\r\n                        <Input type={'password'} value={password} onChange={handlePasswordChange}/>\r\n                    </UserStyled>\r\n                </PasswordAllStyled>\r\n            </InputFilledStyled>\r\n\r\n\r\n            <ButtonFilledStyled width={23} height={30} justifycontent={'space-between'}>\r\n\r\n\r\n\r\n                <input type=\"checkbox\" checked={true}  />\r\n                <input type=\"checkbox\" checked={false} />\r\n\r\n\r\n\r\n                <TextStyled textSize={17} color={'black'} fontWeight={'normal'}>\r\n                    Remember me\r\n                </TextStyled>\r\n\r\n            </ButtonFilledStyled>\r\n\r\n            <ButtonFilledStyled width={37} height={30} justifycontent={'space-between'}>\r\n                <ButtonStyled onClick={checkUserRegistered}>\r\n                    Submit\r\n                </ButtonStyled>\r\n                <ButtonStyled onClick={newAccount}>\r\n                    New Account\r\n                </ButtonStyled>\r\n\r\n            </ButtonFilledStyled>\r\n\r\n\r\n        </LoginStyled>\r\n\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n//добавить вывод сообщения о неправильно введенном логине и пароле\r\n//remember me\r\n\r\n//чекбокс вызывает функцию в которой есть true и false, оа идет в onClick сабмита\r\n//и по условию отменяет действие удаления хэша введенного значения\r\n"]},"metadata":{},"sourceType":"module"}